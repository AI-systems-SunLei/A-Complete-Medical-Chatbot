name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Variable
        id: set-image
        run: |
          echo "IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest" >> $GITHUB_ENV

      - name: Pull the latest Docker image
        run: |
          docker pull ${{ env.IMAGE }}

      - name: Check port 5000 availability
        run: |
          if lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null ; then
            echo "Port 5000 is already in use. Stopping existing container..."
            docker stop myapp-container || true
            docker rm myapp-container || true
          fi

      - name: Stop and remove existing container (if running)
        continue-on-error: true
        run: |
          docker stop myapp-container || true
          docker rm myapp-container || true

      - name: Run the new Docker image
        run: |
          docker run -d --name myapp-container \
            --restart=always \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e OPENAI_BASE_URL="${{ secrets.OPENAI_BASE_URL }}" \
            -p 5000:5000 \
            ${{ env.IMAGE }}

      - name: Check container status
        run: |
          sleep 10
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' myapp-container)
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Container failed to start. Checking logs:"
            docker logs myapp-container
            exit 1
          fi
          echo "Container is running successfully."

      - name: Health check
        run: |
          sleep 15
          curl --fail http://localhost:5000/health || (echo "Application not responding!" && exit 1)
